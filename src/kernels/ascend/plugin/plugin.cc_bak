#include "plugin.h"
// #include "ascend/ascend_runtime.h"
#include <iostream>

namespace infini {
int fun() {
    size_t input_size = 1 * 64 * 66 * 1028;
    size_t output_size = 1 * 64 * 62 * 1024 * 16;
    // void *input = (void *)malloc(input_size * sizeof(float));
    void *output = (void *)malloc(output_size * sizeof(float));
    Shape input_shape = {1, 64, 66, 1028};
    Shape output_shape = {1, 64, 62, 1024, 16};
    PluginMetaData plugin_meta_data = {
        input_shape,
        output_shape,
        input_size,
        output_size,
        // DataType::Float16,
        5,
        1,
    };
    std::vector<float> input_data(input_size, 1.0f);
    std::vector<float> output_data(output_size, 0.0f);
    plugin_kernel(input_data.data(), (float *)output, plugin_meta_data);
    bool flag = true;
    for (int i = 0; i < output_size; i++) {
        if (output_data[i] != *((float *)output + i)) {
            flag = false;
            break;
        }
    }
    if (flag) {
        std::cout << "plugin kernel test pass" << std::endl;
    } else {
        std::cout << "plugin kernel test fail" << std::endl;
    }
    return 0;
}
} // namespace infini

int main() {
    infini::fun();
    return 0;
}